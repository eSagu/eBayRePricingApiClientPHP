<?php
/**
 * BulkTaskPriceSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  eSagu\EBay\RePricing\V1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eSagu ebay RePricing API
 *
 * eSagu API to reprice items on ebay.
 *
<<<<<<< HEAD
 * OpenAPI spec version: 1.2.14
=======
 * OpenAPI spec version: 1.0.0
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace eSagu\EBay\RePricing\V1\Model;

use \ArrayAccess;

/**
 * BulkTaskPriceSettings Class Doc Comment
 *
 * @category    Class
 * @package     eSagu\EBay\RePricing\V1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BulkTaskPriceSettings implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'BulkTaskPriceSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
<<<<<<< HEAD
        'from_field' => 'string',
        'target_field' => 'string',
        'value' => 'int',
        'adjustment_mode' => 'string'
=======
        'adjustment_mode' => 'string',
        'from_field' => 'string',
        'target_field' => 'string',
        'value' => 'int'
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
<<<<<<< HEAD
        'from_field' => 'fromField',
        'target_field' => 'targetField',
        'value' => 'value',
        'adjustment_mode' => 'adjustmentMode'
=======
        'adjustment_mode' => 'adjustmentMode',
        'from_field' => 'fromField',
        'target_field' => 'targetField',
        'value' => 'value'
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
<<<<<<< HEAD
        'from_field' => 'setFromField',
        'target_field' => 'setTargetField',
        'value' => 'setValue',
        'adjustment_mode' => 'setAdjustmentMode'
=======
        'adjustment_mode' => 'setAdjustmentMode',
        'from_field' => 'setFromField',
        'target_field' => 'setTargetField',
        'value' => 'setValue'
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
<<<<<<< HEAD
        'from_field' => 'getFromField',
        'target_field' => 'getTargetField',
        'value' => 'getValue',
        'adjustment_mode' => 'getAdjustmentMode'
=======
        'adjustment_mode' => 'getAdjustmentMode',
        'from_field' => 'getFromField',
        'target_field' => 'getTargetField',
        'value' => 'getValue'
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

<<<<<<< HEAD
=======
    const ADJUSTMENT_MODE_ABSOLUTE = 'ABSOLUTE';
    const ADJUSTMENT_MODE_PERCENTAGE = 'PERCENTAGE';
    const ADJUSTMENT_MODE_TOTAL = 'TOTAL';
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    const FROM_FIELD_INITIAL_PRICE = 'INITIAL_PRICE';
    const FROM_FIELD_CURRENT_PRICE = 'CURRENT_PRICE';
    const FROM_FIELD_MIN_PRICE = 'MIN_PRICE';
    const FROM_FIELD_MAX_PRICE = 'MAX_PRICE';
    const FROM_FIELD_FIXED_PRICE = 'FIXED_PRICE';
    const TARGET_FIELD_INITIAL_PRICE = 'INITIAL_PRICE';
    const TARGET_FIELD_CURRENT_PRICE = 'CURRENT_PRICE';
    const TARGET_FIELD_MIN_PRICE = 'MIN_PRICE';
    const TARGET_FIELD_MAX_PRICE = 'MAX_PRICE';
    const TARGET_FIELD_FIXED_PRICE = 'FIXED_PRICE';
<<<<<<< HEAD
    const ADJUSTMENT_MODE_ABSOLUTE = 'ABSOLUTE';
    const ADJUSTMENT_MODE_PERCENTAGE = 'PERCENTAGE';
    const ADJUSTMENT_MODE_TOTAL = 'TOTAL';
=======
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
<<<<<<< HEAD
=======
    public function getAdjustmentModeAllowableValues()
    {
        return [
            self::ADJUSTMENT_MODE_ABSOLUTE,
            self::ADJUSTMENT_MODE_PERCENTAGE,
            self::ADJUSTMENT_MODE_TOTAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    public function getFromFieldAllowableValues()
    {
        return [
            self::FROM_FIELD_INITIAL_PRICE,
            self::FROM_FIELD_CURRENT_PRICE,
            self::FROM_FIELD_MIN_PRICE,
            self::FROM_FIELD_MAX_PRICE,
            self::FROM_FIELD_FIXED_PRICE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTargetFieldAllowableValues()
    {
        return [
            self::TARGET_FIELD_INITIAL_PRICE,
            self::TARGET_FIELD_CURRENT_PRICE,
            self::TARGET_FIELD_MIN_PRICE,
            self::TARGET_FIELD_MAX_PRICE,
            self::TARGET_FIELD_FIXED_PRICE,
        ];
    }
    
<<<<<<< HEAD
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAdjustmentModeAllowableValues()
    {
        return [
            self::ADJUSTMENT_MODE_ABSOLUTE,
            self::ADJUSTMENT_MODE_PERCENTAGE,
            self::ADJUSTMENT_MODE_TOTAL,
        ];
    }
    
=======
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
<<<<<<< HEAD
        $this->container['from_field'] = isset($data['from_field']) ? $data['from_field'] : null;
        $this->container['target_field'] = isset($data['target_field']) ? $data['target_field'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['adjustment_mode'] = isset($data['adjustment_mode']) ? $data['adjustment_mode'] : null;
=======
        $this->container['adjustment_mode'] = isset($data['adjustment_mode']) ? $data['adjustment_mode'] : null;
        $this->container['from_field'] = isset($data['from_field']) ? $data['from_field'] : null;
        $this->container['target_field'] = isset($data['target_field']) ? $data['target_field'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

<<<<<<< HEAD
=======
        $allowed_values = ["ABSOLUTE", "PERCENTAGE", "TOTAL"];
        if (!in_array($this->container['adjustment_mode'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'adjustment_mode', must be one of 'ABSOLUTE', 'PERCENTAGE', 'TOTAL'.";
        }

>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
        $allowed_values = ["INITIAL_PRICE", "CURRENT_PRICE", "MIN_PRICE", "MAX_PRICE", "FIXED_PRICE"];
        if (!in_array($this->container['from_field'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'from_field', must be one of 'INITIAL_PRICE', 'CURRENT_PRICE', 'MIN_PRICE', 'MAX_PRICE', 'FIXED_PRICE'.";
        }

        $allowed_values = ["INITIAL_PRICE", "CURRENT_PRICE", "MIN_PRICE", "MAX_PRICE", "FIXED_PRICE"];
        if (!in_array($this->container['target_field'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'target_field', must be one of 'INITIAL_PRICE', 'CURRENT_PRICE', 'MIN_PRICE', 'MAX_PRICE', 'FIXED_PRICE'.";
        }

<<<<<<< HEAD
        $allowed_values = ["ABSOLUTE", "PERCENTAGE", "TOTAL"];
        if (!in_array($this->container['adjustment_mode'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'adjustment_mode', must be one of 'ABSOLUTE', 'PERCENTAGE', 'TOTAL'.";
        }

=======
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

<<<<<<< HEAD
=======
        $allowed_values = ["ABSOLUTE", "PERCENTAGE", "TOTAL"];
        if (!in_array($this->container['adjustment_mode'], $allowed_values)) {
            return false;
        }
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
        $allowed_values = ["INITIAL_PRICE", "CURRENT_PRICE", "MIN_PRICE", "MAX_PRICE", "FIXED_PRICE"];
        if (!in_array($this->container['from_field'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["INITIAL_PRICE", "CURRENT_PRICE", "MIN_PRICE", "MAX_PRICE", "FIXED_PRICE"];
        if (!in_array($this->container['target_field'], $allowed_values)) {
            return false;
        }
<<<<<<< HEAD
        $allowed_values = ["ABSOLUTE", "PERCENTAGE", "TOTAL"];
        if (!in_array($this->container['adjustment_mode'], $allowed_values)) {
            return false;
        }
=======
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
        return true;
    }


    /**
<<<<<<< HEAD
=======
     * Gets adjustment_mode
     * @return string
     */
    public function getAdjustmentMode()
    {
        return $this->container['adjustment_mode'];
    }

    /**
     * Sets adjustment_mode
     * @param string $adjustment_mode
     * @return $this
     */
    public function setAdjustmentMode($adjustment_mode)
    {
        $allowed_values = array('ABSOLUTE', 'PERCENTAGE', 'TOTAL');
        if (!is_null($adjustment_mode) && (!in_array($adjustment_mode, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'adjustment_mode', must be one of 'ABSOLUTE', 'PERCENTAGE', 'TOTAL'");
        }
        $this->container['adjustment_mode'] = $adjustment_mode;

        return $this;
    }

    /**
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
     * Gets from_field
     * @return string
     */
    public function getFromField()
    {
        return $this->container['from_field'];
    }

    /**
     * Sets from_field
     * @param string $from_field
     * @return $this
     */
    public function setFromField($from_field)
    {
        $allowed_values = array('INITIAL_PRICE', 'CURRENT_PRICE', 'MIN_PRICE', 'MAX_PRICE', 'FIXED_PRICE');
        if (!is_null($from_field) && (!in_array($from_field, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'from_field', must be one of 'INITIAL_PRICE', 'CURRENT_PRICE', 'MIN_PRICE', 'MAX_PRICE', 'FIXED_PRICE'");
        }
        $this->container['from_field'] = $from_field;

        return $this;
    }

    /**
     * Gets target_field
     * @return string
     */
    public function getTargetField()
    {
        return $this->container['target_field'];
    }

    /**
     * Sets target_field
     * @param string $target_field
     * @return $this
     */
    public function setTargetField($target_field)
    {
        $allowed_values = array('INITIAL_PRICE', 'CURRENT_PRICE', 'MIN_PRICE', 'MAX_PRICE', 'FIXED_PRICE');
        if (!is_null($target_field) && (!in_array($target_field, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'target_field', must be one of 'INITIAL_PRICE', 'CURRENT_PRICE', 'MIN_PRICE', 'MAX_PRICE', 'FIXED_PRICE'");
        }
        $this->container['target_field'] = $target_field;

        return $this;
    }

    /**
     * Gets value
     * @return int
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     * @param int $value
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
<<<<<<< HEAD

    /**
     * Gets adjustment_mode
     * @return string
     */
    public function getAdjustmentMode()
    {
        return $this->container['adjustment_mode'];
    }

    /**
     * Sets adjustment_mode
     * @param string $adjustment_mode
     * @return $this
     */
    public function setAdjustmentMode($adjustment_mode)
    {
        $allowed_values = array('ABSOLUTE', 'PERCENTAGE', 'TOTAL');
        if (!is_null($adjustment_mode) && (!in_array($adjustment_mode, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'adjustment_mode', must be one of 'ABSOLUTE', 'PERCENTAGE', 'TOTAL'");
        }
        $this->container['adjustment_mode'] = $adjustment_mode;

        return $this;
    }
=======
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\eSagu\EBay\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\eSagu\EBay\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


