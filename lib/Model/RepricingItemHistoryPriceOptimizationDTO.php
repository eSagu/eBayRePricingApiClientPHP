<?php
/**
 * RepricingItemHistoryPriceOptimizationDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  eSagu\EBay\RePricing\V1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eSagu ebay RePricing API
 *
 * eSagu API to reprice items on ebay.
 *
<<<<<<< HEAD
 * OpenAPI spec version: 1.2.14
=======
 * OpenAPI spec version: 1.0.0
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace eSagu\EBay\RePricing\V1\Model;

use \ArrayAccess;

/**
 * RepricingItemHistoryPriceOptimizationDTO Class Doc Comment
 *
 * @category    Class
 * @description A given items history of price optimization changes
 * @package     eSagu\EBay\RePricing\V1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RepricingItemHistoryPriceOptimizationDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RepricingItemHistoryPriceOptimizationDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
<<<<<<< HEAD
        'repricing_item_id' => 'int',
        'inserted' => 'int',
        'optimized_price' => 'int',
        'optimized_against_seller' => 'string',
        'meta_information' => 'string[]'
=======
        'inserted' => 'int',
        'meta_information' => 'string[]',
        'optimized_against_seller' => 'string',
        'optimized_price' => 'int',
        'repricing_item_id' => 'int'
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
<<<<<<< HEAD
        'repricing_item_id' => 'repricingItemId',
        'inserted' => 'inserted',
        'optimized_price' => 'optimizedPrice',
        'optimized_against_seller' => 'optimizedAgainstSeller',
        'meta_information' => 'metaInformation'
=======
        'inserted' => 'inserted',
        'meta_information' => 'metaInformation',
        'optimized_against_seller' => 'optimizedAgainstSeller',
        'optimized_price' => 'optimizedPrice',
        'repricing_item_id' => 'repricingItemId'
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
<<<<<<< HEAD
        'repricing_item_id' => 'setRepricingItemId',
        'inserted' => 'setInserted',
        'optimized_price' => 'setOptimizedPrice',
        'optimized_against_seller' => 'setOptimizedAgainstSeller',
        'meta_information' => 'setMetaInformation'
=======
        'inserted' => 'setInserted',
        'meta_information' => 'setMetaInformation',
        'optimized_against_seller' => 'setOptimizedAgainstSeller',
        'optimized_price' => 'setOptimizedPrice',
        'repricing_item_id' => 'setRepricingItemId'
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
<<<<<<< HEAD
        'repricing_item_id' => 'getRepricingItemId',
        'inserted' => 'getInserted',
        'optimized_price' => 'getOptimizedPrice',
        'optimized_against_seller' => 'getOptimizedAgainstSeller',
        'meta_information' => 'getMetaInformation'
=======
        'inserted' => 'getInserted',
        'meta_information' => 'getMetaInformation',
        'optimized_against_seller' => 'getOptimizedAgainstSeller',
        'optimized_price' => 'getOptimizedPrice',
        'repricing_item_id' => 'getRepricingItemId'
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const META_INFORMATION_OPTIMIZED = 'OPTIMIZED';
    const META_INFORMATION_FIXED = 'FIXED';
    const META_INFORMATION_SUCCESS = 'SUCCESS';
    const META_INFORMATION_MIN_PRICE_HIT = 'MIN_PRICE_HIT';
    const META_INFORMATION_MAX_PRICE_HIT = 'MAX_PRICE_HIT';
    const META_INFORMATION_CUSTOM_CODE = 'CUSTOM_CODE';
    const META_INFORMATION_CUSTOM_CODE_NOT_VERIFIED = 'CUSTOM_CODE_NOT_VERIFIED';
    const META_INFORMATION_CUSTOM_CODE_ERROR = 'CUSTOM_CODE_ERROR';
    const META_INFORMATION_CUSTOM_CODE_WITHOUT_PRICE_GAPS = 'CUSTOM_CODE_WITHOUT_PRICE_GAPS';
    const META_INFORMATION_CUSTOM_CODE_NOT_FOUND = 'CUSTOM_CODE_NOT_FOUND';
    const META_INFORMATION_NO_OFFERS_FOUND = 'NO_OFFERS_FOUND';
    const META_INFORMATION_OWN_OFFER_NOT_FOUND = 'OWN_OFFER_NOT_FOUND';
    const META_INFORMATION_TRY_TO_HIT_TOP_100 = 'TRY_TO_HIT_TOP_100';
    const META_INFORMATION_WARNING = 'WARNING';
    const META_INFORMATION_NO_COMPETITORS_FOUND = 'NO_COMPETITORS_FOUND';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getMetaInformationAllowableValues()
    {
        return [
            self::META_INFORMATION_OPTIMIZED,
            self::META_INFORMATION_FIXED,
            self::META_INFORMATION_SUCCESS,
            self::META_INFORMATION_MIN_PRICE_HIT,
            self::META_INFORMATION_MAX_PRICE_HIT,
            self::META_INFORMATION_CUSTOM_CODE,
            self::META_INFORMATION_CUSTOM_CODE_NOT_VERIFIED,
            self::META_INFORMATION_CUSTOM_CODE_ERROR,
            self::META_INFORMATION_CUSTOM_CODE_WITHOUT_PRICE_GAPS,
            self::META_INFORMATION_CUSTOM_CODE_NOT_FOUND,
            self::META_INFORMATION_NO_OFFERS_FOUND,
            self::META_INFORMATION_OWN_OFFER_NOT_FOUND,
            self::META_INFORMATION_TRY_TO_HIT_TOP_100,
            self::META_INFORMATION_WARNING,
            self::META_INFORMATION_NO_COMPETITORS_FOUND,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
<<<<<<< HEAD
        $this->container['repricing_item_id'] = isset($data['repricing_item_id']) ? $data['repricing_item_id'] : null;
        $this->container['inserted'] = isset($data['inserted']) ? $data['inserted'] : null;
        $this->container['optimized_price'] = isset($data['optimized_price']) ? $data['optimized_price'] : null;
        $this->container['optimized_against_seller'] = isset($data['optimized_against_seller']) ? $data['optimized_against_seller'] : null;
        $this->container['meta_information'] = isset($data['meta_information']) ? $data['meta_information'] : null;
=======
        $this->container['inserted'] = isset($data['inserted']) ? $data['inserted'] : null;
        $this->container['meta_information'] = isset($data['meta_information']) ? $data['meta_information'] : null;
        $this->container['optimized_against_seller'] = isset($data['optimized_against_seller']) ? $data['optimized_against_seller'] : null;
        $this->container['optimized_price'] = isset($data['optimized_price']) ? $data['optimized_price'] : null;
        $this->container['repricing_item_id'] = isset($data['repricing_item_id']) ? $data['repricing_item_id'] : null;
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
<<<<<<< HEAD
     * Gets repricing_item_id
     * @return int
     */
    public function getRepricingItemId()
    {
        return $this->container['repricing_item_id'];
    }

    /**
     * Sets repricing_item_id
     * @param int $repricing_item_id
     * @return $this
     */
    public function setRepricingItemId($repricing_item_id)
    {
        $this->container['repricing_item_id'] = $repricing_item_id;

        return $this;
    }

    /**
=======
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
     * Gets inserted
     * @return int
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     * @param int $inserted
     * @return $this
     */
    public function setInserted($inserted)
    {
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
<<<<<<< HEAD
     * Gets optimized_price
     * @return int
     */
    public function getOptimizedPrice()
    {
        return $this->container['optimized_price'];
    }

    /**
     * Sets optimized_price
     * @param int $optimized_price
     * @return $this
     */
    public function setOptimizedPrice($optimized_price)
    {
        $this->container['optimized_price'] = $optimized_price;
=======
     * Gets meta_information
     * @return string[]
     */
    public function getMetaInformation()
    {
        return $this->container['meta_information'];
    }

    /**
     * Sets meta_information
     * @param string[] $meta_information
     * @return $this
     */
    public function setMetaInformation($meta_information)
    {
        $allowed_values = array('OPTIMIZED', 'FIXED', 'SUCCESS', 'MIN_PRICE_HIT', 'MAX_PRICE_HIT', 'CUSTOM_CODE', 'CUSTOM_CODE_NOT_VERIFIED', 'CUSTOM_CODE_ERROR', 'CUSTOM_CODE_WITHOUT_PRICE_GAPS', 'CUSTOM_CODE_NOT_FOUND', 'NO_OFFERS_FOUND', 'OWN_OFFER_NOT_FOUND', 'TRY_TO_HIT_TOP_100', 'WARNING', 'NO_COMPETITORS_FOUND');
        if (!is_null($meta_information) && (array_diff($meta_information, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'meta_information', must be one of 'OPTIMIZED', 'FIXED', 'SUCCESS', 'MIN_PRICE_HIT', 'MAX_PRICE_HIT', 'CUSTOM_CODE', 'CUSTOM_CODE_NOT_VERIFIED', 'CUSTOM_CODE_ERROR', 'CUSTOM_CODE_WITHOUT_PRICE_GAPS', 'CUSTOM_CODE_NOT_FOUND', 'NO_OFFERS_FOUND', 'OWN_OFFER_NOT_FOUND', 'TRY_TO_HIT_TOP_100', 'WARNING', 'NO_COMPETITORS_FOUND'");
        }
        $this->container['meta_information'] = $meta_information;
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b

        return $this;
    }

    /**
     * Gets optimized_against_seller
     * @return string
     */
    public function getOptimizedAgainstSeller()
    {
        return $this->container['optimized_against_seller'];
    }

    /**
     * Sets optimized_against_seller
     * @param string $optimized_against_seller
     * @return $this
     */
    public function setOptimizedAgainstSeller($optimized_against_seller)
    {
        $this->container['optimized_against_seller'] = $optimized_against_seller;

        return $this;
    }

    /**
<<<<<<< HEAD
     * Gets meta_information
     * @return string[]
     */
    public function getMetaInformation()
    {
        return $this->container['meta_information'];
    }

    /**
     * Sets meta_information
     * @param string[] $meta_information
     * @return $this
     */
    public function setMetaInformation($meta_information)
    {
        $allowed_values = array('OPTIMIZED', 'FIXED', 'SUCCESS', 'MIN_PRICE_HIT', 'MAX_PRICE_HIT', 'CUSTOM_CODE', 'CUSTOM_CODE_NOT_VERIFIED', 'CUSTOM_CODE_ERROR', 'CUSTOM_CODE_WITHOUT_PRICE_GAPS', 'CUSTOM_CODE_NOT_FOUND', 'NO_OFFERS_FOUND', 'OWN_OFFER_NOT_FOUND', 'TRY_TO_HIT_TOP_100', 'WARNING', 'NO_COMPETITORS_FOUND');
        if (!is_null($meta_information) && (array_diff($meta_information, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'meta_information', must be one of 'OPTIMIZED', 'FIXED', 'SUCCESS', 'MIN_PRICE_HIT', 'MAX_PRICE_HIT', 'CUSTOM_CODE', 'CUSTOM_CODE_NOT_VERIFIED', 'CUSTOM_CODE_ERROR', 'CUSTOM_CODE_WITHOUT_PRICE_GAPS', 'CUSTOM_CODE_NOT_FOUND', 'NO_OFFERS_FOUND', 'OWN_OFFER_NOT_FOUND', 'TRY_TO_HIT_TOP_100', 'WARNING', 'NO_COMPETITORS_FOUND'");
        }
        $this->container['meta_information'] = $meta_information;
=======
     * Gets optimized_price
     * @return int
     */
    public function getOptimizedPrice()
    {
        return $this->container['optimized_price'];
    }

    /**
     * Sets optimized_price
     * @param int $optimized_price
     * @return $this
     */
    public function setOptimizedPrice($optimized_price)
    {
        $this->container['optimized_price'] = $optimized_price;

        return $this;
    }

    /**
     * Gets repricing_item_id
     * @return int
     */
    public function getRepricingItemId()
    {
        return $this->container['repricing_item_id'];
    }

    /**
     * Sets repricing_item_id
     * @param int $repricing_item_id
     * @return $this
     */
    public function setRepricingItemId($repricing_item_id)
    {
        $this->container['repricing_item_id'] = $repricing_item_id;
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\eSagu\EBay\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\eSagu\EBay\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


