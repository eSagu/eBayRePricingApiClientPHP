<?php
/**
 * RepricingItemStrategyDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  eSagu\EBay\RePricing\V1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eSagu ebay RePricing API
 *
 * eSagu API to reprice items on ebay.
 *
<<<<<<< HEAD
 * OpenAPI spec version: 1.2.14
=======
 * OpenAPI spec version: 1.0.0
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace eSagu\EBay\RePricing\V1\Model;

use \ArrayAccess;

/**
 * RepricingItemStrategyDTO Class Doc Comment
 *
 * @category    Class
 * @description The repricing item&#39;s strategy. The repricing item&#39;s strategy is a container for the item&#39;s strategy and price settings.
 * @package     eSagu\EBay\RePricing\V1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RepricingItemStrategyDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RepricingItemStrategyDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
<<<<<<< HEAD
        'price_gap_id' => 'int',
        'custom_code_id' => 'int',
        'finding_api_filter_id' => 'int',
        'finding_search_term' => '\eSagu\EBay\RePricing\V1\Model\FindingSearchTermDTO',
        'price_settings' => '\eSagu\EBay\RePricing\V1\Model\RepricingItemPriceSettingsDTO',
        'excluded_listings' => 'int[]',
=======
        'custom_code_id' => 'int',
        'excluded_listings' => 'int[]',
        'finding_api_filter_id' => 'int',
        'finding_search_term' => '\eSagu\EBay\RePricing\V1\Model\FindingSearchTermDTO',
        'price_gap_id' => 'int',
        'price_settings' => '\eSagu\EBay\RePricing\V1\Model\RepricingItemPriceSettingsDTO',
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
        'inserted' => '\DateTime',
        'updated' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
<<<<<<< HEAD
        'price_gap_id' => 'priceGapId',
        'custom_code_id' => 'customCodeId',
        'finding_api_filter_id' => 'findingAPIFilterId',
        'finding_search_term' => 'findingSearchTerm',
        'price_settings' => 'priceSettings',
        'excluded_listings' => 'excludedListings',
=======
        'custom_code_id' => 'customCodeId',
        'excluded_listings' => 'excludedListings',
        'finding_api_filter_id' => 'findingAPIFilterId',
        'finding_search_term' => 'findingSearchTerm',
        'price_gap_id' => 'priceGapId',
        'price_settings' => 'priceSettings',
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
        'inserted' => 'inserted',
        'updated' => 'updated'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
<<<<<<< HEAD
        'price_gap_id' => 'setPriceGapId',
        'custom_code_id' => 'setCustomCodeId',
        'finding_api_filter_id' => 'setFindingApiFilterId',
        'finding_search_term' => 'setFindingSearchTerm',
        'price_settings' => 'setPriceSettings',
        'excluded_listings' => 'setExcludedListings',
=======
        'custom_code_id' => 'setCustomCodeId',
        'excluded_listings' => 'setExcludedListings',
        'finding_api_filter_id' => 'setFindingApiFilterId',
        'finding_search_term' => 'setFindingSearchTerm',
        'price_gap_id' => 'setPriceGapId',
        'price_settings' => 'setPriceSettings',
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
        'inserted' => 'setInserted',
        'updated' => 'setUpdated'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
<<<<<<< HEAD
        'price_gap_id' => 'getPriceGapId',
        'custom_code_id' => 'getCustomCodeId',
        'finding_api_filter_id' => 'getFindingApiFilterId',
        'finding_search_term' => 'getFindingSearchTerm',
        'price_settings' => 'getPriceSettings',
        'excluded_listings' => 'getExcludedListings',
=======
        'custom_code_id' => 'getCustomCodeId',
        'excluded_listings' => 'getExcludedListings',
        'finding_api_filter_id' => 'getFindingApiFilterId',
        'finding_search_term' => 'getFindingSearchTerm',
        'price_gap_id' => 'getPriceGapId',
        'price_settings' => 'getPriceSettings',
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
        'inserted' => 'getInserted',
        'updated' => 'getUpdated'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
<<<<<<< HEAD
        $this->container['price_gap_id'] = isset($data['price_gap_id']) ? $data['price_gap_id'] : null;
        $this->container['custom_code_id'] = isset($data['custom_code_id']) ? $data['custom_code_id'] : null;
        $this->container['finding_api_filter_id'] = isset($data['finding_api_filter_id']) ? $data['finding_api_filter_id'] : null;
        $this->container['finding_search_term'] = isset($data['finding_search_term']) ? $data['finding_search_term'] : null;
        $this->container['price_settings'] = isset($data['price_settings']) ? $data['price_settings'] : null;
        $this->container['excluded_listings'] = isset($data['excluded_listings']) ? $data['excluded_listings'] : null;
=======
        $this->container['custom_code_id'] = isset($data['custom_code_id']) ? $data['custom_code_id'] : null;
        $this->container['excluded_listings'] = isset($data['excluded_listings']) ? $data['excluded_listings'] : null;
        $this->container['finding_api_filter_id'] = isset($data['finding_api_filter_id']) ? $data['finding_api_filter_id'] : null;
        $this->container['finding_search_term'] = isset($data['finding_search_term']) ? $data['finding_search_term'] : null;
        $this->container['price_gap_id'] = isset($data['price_gap_id']) ? $data['price_gap_id'] : null;
        $this->container['price_settings'] = isset($data['price_settings']) ? $data['price_settings'] : null;
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
        $this->container['inserted'] = isset($data['inserted']) ? $data['inserted'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
<<<<<<< HEAD
     * Gets price_gap_id
     * @return int
     */
    public function getPriceGapId()
    {
        return $this->container['price_gap_id'];
    }

    /**
     * Sets price_gap_id
     * @param int $price_gap_id
     * @return $this
     */
    public function setPriceGapId($price_gap_id)
    {
        $this->container['price_gap_id'] = $price_gap_id;

        return $this;
    }

    /**
=======
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
     * Gets custom_code_id
     * @return int
     */
    public function getCustomCodeId()
    {
        return $this->container['custom_code_id'];
    }

    /**
     * Sets custom_code_id
     * @param int $custom_code_id
     * @return $this
     */
    public function setCustomCodeId($custom_code_id)
    {
        $this->container['custom_code_id'] = $custom_code_id;

        return $this;
    }

    /**
<<<<<<< HEAD
=======
     * Gets excluded_listings
     * @return int[]
     */
    public function getExcludedListings()
    {
        return $this->container['excluded_listings'];
    }

    /**
     * Sets excluded_listings
     * @param int[] $excluded_listings
     * @return $this
     */
    public function setExcludedListings($excluded_listings)
    {
        $this->container['excluded_listings'] = $excluded_listings;

        return $this;
    }

    /**
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
     * Gets finding_api_filter_id
     * @return int
     */
    public function getFindingApiFilterId()
    {
        return $this->container['finding_api_filter_id'];
    }

    /**
     * Sets finding_api_filter_id
     * @param int $finding_api_filter_id
     * @return $this
     */
    public function setFindingApiFilterId($finding_api_filter_id)
    {
        $this->container['finding_api_filter_id'] = $finding_api_filter_id;

        return $this;
    }

    /**
     * Gets finding_search_term
     * @return \eSagu\EBay\RePricing\V1\Model\FindingSearchTermDTO
     */
    public function getFindingSearchTerm()
    {
        return $this->container['finding_search_term'];
    }

    /**
     * Sets finding_search_term
     * @param \eSagu\EBay\RePricing\V1\Model\FindingSearchTermDTO $finding_search_term
     * @return $this
     */
    public function setFindingSearchTerm($finding_search_term)
    {
        $this->container['finding_search_term'] = $finding_search_term;

        return $this;
    }

    /**
<<<<<<< HEAD
=======
     * Gets price_gap_id
     * @return int
     */
    public function getPriceGapId()
    {
        return $this->container['price_gap_id'];
    }

    /**
     * Sets price_gap_id
     * @param int $price_gap_id
     * @return $this
     */
    public function setPriceGapId($price_gap_id)
    {
        $this->container['price_gap_id'] = $price_gap_id;

        return $this;
    }

    /**
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
     * Gets price_settings
     * @return \eSagu\EBay\RePricing\V1\Model\RepricingItemPriceSettingsDTO
     */
    public function getPriceSettings()
    {
        return $this->container['price_settings'];
    }

    /**
     * Sets price_settings
     * @param \eSagu\EBay\RePricing\V1\Model\RepricingItemPriceSettingsDTO $price_settings
     * @return $this
     */
    public function setPriceSettings($price_settings)
    {
        $this->container['price_settings'] = $price_settings;

        return $this;
    }

    /**
<<<<<<< HEAD
     * Gets excluded_listings
     * @return int[]
     */
    public function getExcludedListings()
    {
        return $this->container['excluded_listings'];
    }

    /**
     * Sets excluded_listings
     * @param int[] $excluded_listings
     * @return $this
     */
    public function setExcludedListings($excluded_listings)
    {
        $this->container['excluded_listings'] = $excluded_listings;

        return $this;
    }

    /**
=======
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
     * Gets inserted
     * @return \DateTime
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     * @param \DateTime $inserted
     * @return $this
     */
    public function setInserted($inserted)
    {
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets updated
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     * @param \DateTime $updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\eSagu\EBay\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\eSagu\EBay\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


