<?php
/**
 * ItemOfferDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  eSagu\EBay\RePricing\V1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eSagu ebay RePricing API
 *
 * eSagu API to reprice items on ebay.
 *
 * OpenAPI spec version: 1.2.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace eSagu\EBay\RePricing\V1\Model;

use \ArrayAccess;

/**
 * ItemOfferDTO Class Doc Comment
 *
 * @category    Class
 * @description A offer on ebay. An offer contains information about an offer on a item. The gap is computed by the item&#39;s price gap. The offer flags contains information like the compared to flag indicating which offer was used as repricing target.
 * @package     eSagu\EBay\RePricing\V1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ItemOfferDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ItemOfferDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'item_id' => 'int',
        'title' => 'string',
        'category_id' => 'int',
        'product_id_type' => 'string',
        'product_id' => 'string',
        'country' => 'string',
        'seller_name' => 'string',
        'feedback_score' => 'int',
        'positive_feedback_percent' => 'int',
        'shipping_costs' => 'int',
        'current_price' => 'int',
        'listing_type' => 'string',
        'condition' => 'string',
        'price_gap' => 'int',
        'flags' => 'string[]',
        'is_multi_variation_listing' => 'bool',
        'global_id' => 'string',
        'inserted' => '\DateTime',
        'updated' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'item_id' => 'itemId',
        'title' => 'title',
        'category_id' => 'categoryId',
        'product_id_type' => 'productIdType',
        'product_id' => 'productId',
        'country' => 'country',
        'seller_name' => 'sellerName',
        'feedback_score' => 'feedbackScore',
        'positive_feedback_percent' => 'positiveFeedbackPercent',
        'shipping_costs' => 'shippingCosts',
        'current_price' => 'currentPrice',
        'listing_type' => 'listingType',
        'condition' => 'condition',
        'price_gap' => 'priceGap',
        'flags' => 'flags',
        'is_multi_variation_listing' => 'isMultiVariationListing',
        'global_id' => 'globalId',
        'inserted' => 'inserted',
        'updated' => 'updated'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'item_id' => 'setItemId',
        'title' => 'setTitle',
        'category_id' => 'setCategoryId',
        'product_id_type' => 'setProductIdType',
        'product_id' => 'setProductId',
        'country' => 'setCountry',
        'seller_name' => 'setSellerName',
        'feedback_score' => 'setFeedbackScore',
        'positive_feedback_percent' => 'setPositiveFeedbackPercent',
        'shipping_costs' => 'setShippingCosts',
        'current_price' => 'setCurrentPrice',
        'listing_type' => 'setListingType',
        'condition' => 'setCondition',
        'price_gap' => 'setPriceGap',
        'flags' => 'setFlags',
        'is_multi_variation_listing' => 'setIsMultiVariationListing',
        'global_id' => 'setGlobalId',
        'inserted' => 'setInserted',
        'updated' => 'setUpdated'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'item_id' => 'getItemId',
        'title' => 'getTitle',
        'category_id' => 'getCategoryId',
        'product_id_type' => 'getProductIdType',
        'product_id' => 'getProductId',
        'country' => 'getCountry',
        'seller_name' => 'getSellerName',
        'feedback_score' => 'getFeedbackScore',
        'positive_feedback_percent' => 'getPositiveFeedbackPercent',
        'shipping_costs' => 'getShippingCosts',
        'current_price' => 'getCurrentPrice',
        'listing_type' => 'getListingType',
        'condition' => 'getCondition',
        'price_gap' => 'getPriceGap',
        'flags' => 'getFlags',
        'is_multi_variation_listing' => 'getIsMultiVariationListing',
        'global_id' => 'getGlobalId',
        'inserted' => 'getInserted',
        'updated' => 'getUpdated'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PRODUCT_ID_TYPE_EAN = 'EAN';
    const PRODUCT_ID_TYPE_UPC = 'UPC';
    const PRODUCT_ID_TYPE_ISBN = 'ISBN';
    const PRODUCT_ID_TYPE_REFERENCE_ID = 'REFERENCE_ID';
    const LISTING_TYPE_UNKNOWN = 'UNKNOWN';
    const LISTING_TYPE_CHINESE = 'CHINESE';
    const LISTING_TYPE_DUTCH = 'DUTCH';
    const LISTING_TYPE_LIVE = 'LIVE';
    const LISTING_TYPE_AUCTION = 'AUCTION';
    const LISTING_TYPE_AD_TYPE = 'AD_TYPE';
    const LISTING_TYPE_STORES_FIXED_PRICE = 'STORES_FIXED_PRICE';
    const LISTING_TYPE_PERSONAL_OFFER = 'PERSONAL_OFFER';
    const LISTING_TYPE_FIXED_PRICE_ITEM = 'FIXED_PRICE_ITEM';
    const LISTING_TYPE_HALF = 'HALF';
    const LISTING_TYPE_LEAD_GENERATION = 'LEAD_GENERATION';
    const LISTING_TYPE_EXPRESS = 'EXPRESS';
    const LISTING_TYPE_SHOPPING = 'SHOPPING';
    const LISTING_TYPE_CUSTOM_CODE = 'CUSTOM_CODE';
    const CONDITION_NEW = 'NEW';
    const CONDITION_NEW_OTHER = 'NEW_OTHER';
    const CONDITION_NEW_WITH_DEFECTS = 'NEW_WITH_DEFECTS';
    const CONDITION_MANUFACTURER_REFURBISHED = 'MANUFACTURER_REFURBISHED';
    const CONDITION_EXCELLENT_REFURBISHED_BY_QUALIFIED = 'EXCELLENT_REFURBISHED_BY_QUALIFIED';
    const CONDITION_VERY_GOOD_REFURBISHED_BY_QUALIFIED = 'VERY_GOOD_REFURBISHED_BY_QUALIFIED';
    const CONDITION_GOOD_REFURBISHED_BY_QUALIFIED = 'GOOD_REFURBISHED_BY_QUALIFIED';
    const CONDITION_SELLER_REFURBISHED = 'SELLER_REFURBISHED';
    const CONDITION_LIKE_NEW = 'LIKE_NEW';
    const CONDITION_USED_EXCELLENT = 'USED_EXCELLENT';
    const CONDITION_USED_VERY_GOOD = 'USED_VERY_GOOD';
    const CONDITION_USED_GOOD = 'USED_GOOD';
    const CONDITION_USED_ACCEPTABLE = 'USED_ACCEPTABLE';
    const CONDITION_FOR_PARTS_OR_NOT_WORKING = 'FOR_PARTS_OR_NOT_WORKING';
    const CONDITION_UNKNOWN = 'UNKNOWN';
    const FLAGS_COMPARED_TO = 'COMPARED_TO';
    const FLAGS_MY_OWN_OFFER = 'MY_OWN_OFFER';
    const FLAGS_EXCLUDED_BY_ITEM_ID = 'EXCLUDED_BY_ITEM_ID';
    const GLOBAL_ID_US = 'EBAY_US';
    const GLOBAL_ID_ENCA = 'EBAY_ENCA';
    const GLOBAL_ID_GB = 'EBAY_GB';
    const GLOBAL_ID_AU = 'EBAY_AU';
    const GLOBAL_ID_AT = 'EBAY_AT';
    const GLOBAL_ID_FRBE = 'EBAY_FRBE';
    const GLOBAL_ID_FR = 'EBAY_FR';
    const GLOBAL_ID_DE = 'EBAY_DE';
    const GLOBAL_ID_MOTOR = 'EBAY_MOTOR';
    const GLOBAL_ID_IT = 'EBAY_IT';
    const GLOBAL_ID_NLBE = 'EBAY_NLBE';
    const GLOBAL_ID_NL = 'EBAY_NL';
    const GLOBAL_ID_ES = 'EBAY_ES';
    const GLOBAL_ID_CH = 'EBAY_CH';
    const GLOBAL_ID_HK = 'EBAY_HK';
    const GLOBAL_ID_IN = 'EBAY_IN';
    const GLOBAL_ID_IE = 'EBAY_IE';
    const GLOBAL_ID_MY = 'EBAY_MY';
    const GLOBAL_ID_FRCA = 'EBAY_FRCA';
    const GLOBAL_ID_PH = 'EBAY_PH';
    const GLOBAL_ID_PL = 'EBAY_PL';
    const GLOBAL_ID_SG = 'EBAY_SG';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getProductIdTypeAllowableValues()
    {
        return [
            self::PRODUCT_ID_TYPE_EAN,
            self::PRODUCT_ID_TYPE_UPC,
            self::PRODUCT_ID_TYPE_ISBN,
            self::PRODUCT_ID_TYPE_REFERENCE_ID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getListingTypeAllowableValues()
    {
        return [
            self::LISTING_TYPE_UNKNOWN,
            self::LISTING_TYPE_CHINESE,
            self::LISTING_TYPE_DUTCH,
            self::LISTING_TYPE_LIVE,
            self::LISTING_TYPE_AUCTION,
            self::LISTING_TYPE_AD_TYPE,
            self::LISTING_TYPE_STORES_FIXED_PRICE,
            self::LISTING_TYPE_PERSONAL_OFFER,
            self::LISTING_TYPE_FIXED_PRICE_ITEM,
            self::LISTING_TYPE_HALF,
            self::LISTING_TYPE_LEAD_GENERATION,
            self::LISTING_TYPE_EXPRESS,
            self::LISTING_TYPE_SHOPPING,
            self::LISTING_TYPE_CUSTOM_CODE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getConditionAllowableValues()
    {
        return [
            self::CONDITION_NEW,
            self::CONDITION_NEW_OTHER,
            self::CONDITION_NEW_WITH_DEFECTS,
            self::CONDITION_MANUFACTURER_REFURBISHED,
            self::CONDITION_EXCELLENT_REFURBISHED_BY_QUALIFIED,
            self::CONDITION_VERY_GOOD_REFURBISHED_BY_QUALIFIED,
            self::CONDITION_GOOD_REFURBISHED_BY_QUALIFIED,
            self::CONDITION_SELLER_REFURBISHED,
            self::CONDITION_LIKE_NEW,
            self::CONDITION_USED_EXCELLENT,
            self::CONDITION_USED_VERY_GOOD,
            self::CONDITION_USED_GOOD,
            self::CONDITION_USED_ACCEPTABLE,
            self::CONDITION_FOR_PARTS_OR_NOT_WORKING,
            self::CONDITION_UNKNOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFlagsAllowableValues()
    {
        return [
            self::FLAGS_COMPARED_TO,
            self::FLAGS_MY_OWN_OFFER,
            self::FLAGS_EXCLUDED_BY_ITEM_ID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getGlobalIdAllowableValues()
    {
        return [
            self::GLOBAL_ID_US,
            self::GLOBAL_ID_ENCA,
            self::GLOBAL_ID_GB,
            self::GLOBAL_ID_AU,
            self::GLOBAL_ID_AT,
            self::GLOBAL_ID_FRBE,
            self::GLOBAL_ID_FR,
            self::GLOBAL_ID_DE,
            self::GLOBAL_ID_MOTOR,
            self::GLOBAL_ID_IT,
            self::GLOBAL_ID_NLBE,
            self::GLOBAL_ID_NL,
            self::GLOBAL_ID_ES,
            self::GLOBAL_ID_CH,
            self::GLOBAL_ID_HK,
            self::GLOBAL_ID_IN,
            self::GLOBAL_ID_IE,
            self::GLOBAL_ID_MY,
            self::GLOBAL_ID_FRCA,
            self::GLOBAL_ID_PH,
            self::GLOBAL_ID_PL,
            self::GLOBAL_ID_SG,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['product_id_type'] = isset($data['product_id_type']) ? $data['product_id_type'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['seller_name'] = isset($data['seller_name']) ? $data['seller_name'] : null;
        $this->container['feedback_score'] = isset($data['feedback_score']) ? $data['feedback_score'] : null;
        $this->container['positive_feedback_percent'] = isset($data['positive_feedback_percent']) ? $data['positive_feedback_percent'] : null;
        $this->container['shipping_costs'] = isset($data['shipping_costs']) ? $data['shipping_costs'] : null;
        $this->container['current_price'] = isset($data['current_price']) ? $data['current_price'] : null;
        $this->container['listing_type'] = isset($data['listing_type']) ? $data['listing_type'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['price_gap'] = isset($data['price_gap']) ? $data['price_gap'] : null;
        $this->container['flags'] = isset($data['flags']) ? $data['flags'] : null;
        $this->container['is_multi_variation_listing'] = isset($data['is_multi_variation_listing']) ? $data['is_multi_variation_listing'] : null;
        $this->container['global_id'] = isset($data['global_id']) ? $data['global_id'] : null;
        $this->container['inserted'] = isset($data['inserted']) ? $data['inserted'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["EAN", "UPC", "ISBN", "REFERENCE_ID"];
        if (!in_array($this->container['product_id_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'product_id_type', must be one of 'EAN', 'UPC', 'ISBN', 'REFERENCE_ID'.";
        }

        $allowed_values = ["UNKNOWN", "CHINESE", "DUTCH", "LIVE", "AUCTION", "AD_TYPE", "STORES_FIXED_PRICE", "PERSONAL_OFFER", "FIXED_PRICE_ITEM", "HALF", "LEAD_GENERATION", "EXPRESS", "SHOPPING", "CUSTOM_CODE"];
        if (!in_array($this->container['listing_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'listing_type', must be one of 'UNKNOWN', 'CHINESE', 'DUTCH', 'LIVE', 'AUCTION', 'AD_TYPE', 'STORES_FIXED_PRICE', 'PERSONAL_OFFER', 'FIXED_PRICE_ITEM', 'HALF', 'LEAD_GENERATION', 'EXPRESS', 'SHOPPING', 'CUSTOM_CODE'.";
        }

        $allowed_values = ["NEW", "NEW_OTHER", "NEW_WITH_DEFECTS", "MANUFACTURER_REFURBISHED", "EXCELLENT_REFURBISHED_BY_QUALIFIED", "VERY_GOOD_REFURBISHED_BY_QUALIFIED", "GOOD_REFURBISHED_BY_QUALIFIED", "SELLER_REFURBISHED", "LIKE_NEW", "USED_EXCELLENT", "USED_VERY_GOOD", "USED_GOOD", "USED_ACCEPTABLE", "FOR_PARTS_OR_NOT_WORKING", "UNKNOWN"];
        if (!in_array($this->container['condition'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'condition', must be one of 'NEW', 'NEW_OTHER', 'NEW_WITH_DEFECTS', 'MANUFACTURER_REFURBISHED', 'EXCELLENT_REFURBISHED_BY_QUALIFIED', 'VERY_GOOD_REFURBISHED_BY_QUALIFIED', 'GOOD_REFURBISHED_BY_QUALIFIED', 'SELLER_REFURBISHED', 'LIKE_NEW', 'USED_EXCELLENT', 'USED_VERY_GOOD', 'USED_GOOD', 'USED_ACCEPTABLE', 'FOR_PARTS_OR_NOT_WORKING', 'UNKNOWN'.";
        }

        $allowed_values = ["EBAY_US", "EBAY_ENCA", "EBAY_GB", "EBAY_AU", "EBAY_AT", "EBAY_FRBE", "EBAY_FR", "EBAY_DE", "EBAY_MOTOR", "EBAY_IT", "EBAY_NLBE", "EBAY_NL", "EBAY_ES", "EBAY_CH", "EBAY_HK", "EBAY_IN", "EBAY_IE", "EBAY_MY", "EBAY_FRCA", "EBAY_PH", "EBAY_PL", "EBAY_SG"];
        if (!in_array($this->container['global_id'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'global_id', must be one of 'EBAY_US', 'EBAY_ENCA', 'EBAY_GB', 'EBAY_AU', 'EBAY_AT', 'EBAY_FRBE', 'EBAY_FR', 'EBAY_DE', 'EBAY_MOTOR', 'EBAY_IT', 'EBAY_NLBE', 'EBAY_NL', 'EBAY_ES', 'EBAY_CH', 'EBAY_HK', 'EBAY_IN', 'EBAY_IE', 'EBAY_MY', 'EBAY_FRCA', 'EBAY_PH', 'EBAY_PL', 'EBAY_SG'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["EAN", "UPC", "ISBN", "REFERENCE_ID"];
        if (!in_array($this->container['product_id_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["UNKNOWN", "CHINESE", "DUTCH", "LIVE", "AUCTION", "AD_TYPE", "STORES_FIXED_PRICE", "PERSONAL_OFFER", "FIXED_PRICE_ITEM", "HALF", "LEAD_GENERATION", "EXPRESS", "SHOPPING", "CUSTOM_CODE"];
        if (!in_array($this->container['listing_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["NEW", "NEW_OTHER", "NEW_WITH_DEFECTS", "MANUFACTURER_REFURBISHED", "EXCELLENT_REFURBISHED_BY_QUALIFIED", "VERY_GOOD_REFURBISHED_BY_QUALIFIED", "GOOD_REFURBISHED_BY_QUALIFIED", "SELLER_REFURBISHED", "LIKE_NEW", "USED_EXCELLENT", "USED_VERY_GOOD", "USED_GOOD", "USED_ACCEPTABLE", "FOR_PARTS_OR_NOT_WORKING", "UNKNOWN"];
        if (!in_array($this->container['condition'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["EBAY_US", "EBAY_ENCA", "EBAY_GB", "EBAY_AU", "EBAY_AT", "EBAY_FRBE", "EBAY_FR", "EBAY_DE", "EBAY_MOTOR", "EBAY_IT", "EBAY_NLBE", "EBAY_NL", "EBAY_ES", "EBAY_CH", "EBAY_HK", "EBAY_IN", "EBAY_IE", "EBAY_MY", "EBAY_FRCA", "EBAY_PH", "EBAY_PL", "EBAY_SG"];
        if (!in_array($this->container['global_id'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets item_id
     * @return int
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     * @param int $item_id
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets category_id
     * @return int
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     * @param int $category_id
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets product_id_type
     * @return string
     */
    public function getProductIdType()
    {
        return $this->container['product_id_type'];
    }

    /**
     * Sets product_id_type
     * @param string $product_id_type
     * @return $this
     */
    public function setProductIdType($product_id_type)
    {
        $allowed_values = array('EAN', 'UPC', 'ISBN', 'REFERENCE_ID');
        if (!is_null($product_id_type) && (!in_array($product_id_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'product_id_type', must be one of 'EAN', 'UPC', 'ISBN', 'REFERENCE_ID'");
        }
        $this->container['product_id_type'] = $product_id_type;

        return $this;
    }

    /**
     * Gets product_id
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     * @param string $product_id
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets seller_name
     * @return string
     */
    public function getSellerName()
    {
        return $this->container['seller_name'];
    }

    /**
     * Sets seller_name
     * @param string $seller_name
     * @return $this
     */
    public function setSellerName($seller_name)
    {
        $this->container['seller_name'] = $seller_name;

        return $this;
    }

    /**
     * Gets feedback_score
     * @return int
     */
    public function getFeedbackScore()
    {
        return $this->container['feedback_score'];
    }

    /**
     * Sets feedback_score
     * @param int $feedback_score
     * @return $this
     */
    public function setFeedbackScore($feedback_score)
    {
        $this->container['feedback_score'] = $feedback_score;

        return $this;
    }

    /**
     * Gets positive_feedback_percent
     * @return int
     */
    public function getPositiveFeedbackPercent()
    {
        return $this->container['positive_feedback_percent'];
    }

    /**
     * Sets positive_feedback_percent
     * @param int $positive_feedback_percent
     * @return $this
     */
    public function setPositiveFeedbackPercent($positive_feedback_percent)
    {
        $this->container['positive_feedback_percent'] = $positive_feedback_percent;

        return $this;
    }

    /**
     * Gets shipping_costs
     * @return int
     */
    public function getShippingCosts()
    {
        return $this->container['shipping_costs'];
    }

    /**
     * Sets shipping_costs
     * @param int $shipping_costs
     * @return $this
     */
    public function setShippingCosts($shipping_costs)
    {
        $this->container['shipping_costs'] = $shipping_costs;

        return $this;
    }

    /**
     * Gets current_price
     * @return int
     */
    public function getCurrentPrice()
    {
        return $this->container['current_price'];
    }

    /**
     * Sets current_price
     * @param int $current_price
     * @return $this
     */
    public function setCurrentPrice($current_price)
    {
        $this->container['current_price'] = $current_price;

        return $this;
    }

    /**
     * Gets listing_type
     * @return string
     */
    public function getListingType()
    {
        return $this->container['listing_type'];
    }

    /**
     * Sets listing_type
     * @param string $listing_type
     * @return $this
     */
    public function setListingType($listing_type)
    {
        $allowed_values = array('UNKNOWN', 'CHINESE', 'DUTCH', 'LIVE', 'AUCTION', 'AD_TYPE', 'STORES_FIXED_PRICE', 'PERSONAL_OFFER', 'FIXED_PRICE_ITEM', 'HALF', 'LEAD_GENERATION', 'EXPRESS', 'SHOPPING', 'CUSTOM_CODE');
        if (!is_null($listing_type) && (!in_array($listing_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'listing_type', must be one of 'UNKNOWN', 'CHINESE', 'DUTCH', 'LIVE', 'AUCTION', 'AD_TYPE', 'STORES_FIXED_PRICE', 'PERSONAL_OFFER', 'FIXED_PRICE_ITEM', 'HALF', 'LEAD_GENERATION', 'EXPRESS', 'SHOPPING', 'CUSTOM_CODE'");
        }
        $this->container['listing_type'] = $listing_type;

        return $this;
    }

    /**
     * Gets condition
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     * @param string $condition
     * @return $this
     */
    public function setCondition($condition)
    {
        $allowed_values = array('NEW', 'NEW_OTHER', 'NEW_WITH_DEFECTS', 'MANUFACTURER_REFURBISHED', 'EXCELLENT_REFURBISHED_BY_QUALIFIED', 'VERY_GOOD_REFURBISHED_BY_QUALIFIED', 'GOOD_REFURBISHED_BY_QUALIFIED', 'SELLER_REFURBISHED', 'LIKE_NEW', 'USED_EXCELLENT', 'USED_VERY_GOOD', 'USED_GOOD', 'USED_ACCEPTABLE', 'FOR_PARTS_OR_NOT_WORKING', 'UNKNOWN');
        if (!is_null($condition) && (!in_array($condition, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'condition', must be one of 'NEW', 'NEW_OTHER', 'NEW_WITH_DEFECTS', 'MANUFACTURER_REFURBISHED', 'EXCELLENT_REFURBISHED_BY_QUALIFIED', 'VERY_GOOD_REFURBISHED_BY_QUALIFIED', 'GOOD_REFURBISHED_BY_QUALIFIED', 'SELLER_REFURBISHED', 'LIKE_NEW', 'USED_EXCELLENT', 'USED_VERY_GOOD', 'USED_GOOD', 'USED_ACCEPTABLE', 'FOR_PARTS_OR_NOT_WORKING', 'UNKNOWN'");
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets price_gap
     * @return int
     */
    public function getPriceGap()
    {
        return $this->container['price_gap'];
    }

    /**
     * Sets price_gap
     * @param int $price_gap
     * @return $this
     */
    public function setPriceGap($price_gap)
    {
        $this->container['price_gap'] = $price_gap;

        return $this;
    }

    /**
     * Gets flags
     * @return string[]
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     * @param string[] $flags
     * @return $this
     */
    public function setFlags($flags)
    {
        $allowed_values = array('COMPARED_TO', 'MY_OWN_OFFER', 'EXCLUDED_BY_ITEM_ID');
        if (!is_null($flags) && (array_diff($flags, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'flags', must be one of 'COMPARED_TO', 'MY_OWN_OFFER', 'EXCLUDED_BY_ITEM_ID'");
        }
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets is_multi_variation_listing
     * @return bool
     */
    public function getIsMultiVariationListing()
    {
        return $this->container['is_multi_variation_listing'];
    }

    /**
     * Sets is_multi_variation_listing
     * @param bool $is_multi_variation_listing
     * @return $this
     */
    public function setIsMultiVariationListing($is_multi_variation_listing)
    {
        $this->container['is_multi_variation_listing'] = $is_multi_variation_listing;

        return $this;
    }

    /**
     * Gets global_id
     * @return string
     */
    public function getGlobalId()
    {
        return $this->container['global_id'];
    }

    /**
     * Sets global_id
     * @param string $global_id
     * @return $this
     */
    public function setGlobalId($global_id)
    {
        $allowed_values = array('EBAY_US', 'EBAY_ENCA', 'EBAY_GB', 'EBAY_AU', 'EBAY_AT', 'EBAY_FRBE', 'EBAY_FR', 'EBAY_DE', 'EBAY_MOTOR', 'EBAY_IT', 'EBAY_NLBE', 'EBAY_NL', 'EBAY_ES', 'EBAY_CH', 'EBAY_HK', 'EBAY_IN', 'EBAY_IE', 'EBAY_MY', 'EBAY_FRCA', 'EBAY_PH', 'EBAY_PL', 'EBAY_SG');
        if (!is_null($global_id) && (!in_array($global_id, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'global_id', must be one of 'EBAY_US', 'EBAY_ENCA', 'EBAY_GB', 'EBAY_AU', 'EBAY_AT', 'EBAY_FRBE', 'EBAY_FR', 'EBAY_DE', 'EBAY_MOTOR', 'EBAY_IT', 'EBAY_NLBE', 'EBAY_NL', 'EBAY_ES', 'EBAY_CH', 'EBAY_HK', 'EBAY_IN', 'EBAY_IE', 'EBAY_MY', 'EBAY_FRCA', 'EBAY_PH', 'EBAY_PL', 'EBAY_SG'");
        }
        $this->container['global_id'] = $global_id;

        return $this;
    }

    /**
     * Gets inserted
     * @return \DateTime
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     * @param \DateTime $inserted
     * @return $this
     */
    public function setInserted($inserted)
    {
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets updated
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     * @param \DateTime $updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\eSagu\EBay\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\eSagu\EBay\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


