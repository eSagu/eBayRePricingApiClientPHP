<?php
/**
 * FindingSearchTermDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  eSagu\EBay\RePricing\V1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eSagu ebay RePricing API
 *
 * eSagu API to reprice items on ebay.
 *
 * OpenAPI spec version: 1.2.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace eSagu\EBay\RePricing\V1\Model;

use \ArrayAccess;

/**
 * FindingSearchTermDTO Class Doc Comment
 *
 * @category    Class
 * @description The search term used for finding item competitors.
 * @package     eSagu\EBay\RePricing\V1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FindingSearchTermDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'FindingSearchTermDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'repricing_item_id' => 'int',
        'inserted' => '\DateTime',
        'updated' => '\DateTime',
        'operation' => 'string',
        'product_id_type' => 'string',
        'search_term' => 'string',
        'source' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'repricing_item_id' => 'repricingItemId',
        'inserted' => 'inserted',
        'updated' => 'updated',
        'operation' => 'operation',
        'product_id_type' => 'productIdType',
        'search_term' => 'searchTerm',
        'source' => 'source'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'repricing_item_id' => 'setRepricingItemId',
        'inserted' => 'setInserted',
        'updated' => 'setUpdated',
        'operation' => 'setOperation',
        'product_id_type' => 'setProductIdType',
        'search_term' => 'setSearchTerm',
        'source' => 'setSource'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'repricing_item_id' => 'getRepricingItemId',
        'inserted' => 'getInserted',
        'updated' => 'getUpdated',
        'operation' => 'getOperation',
        'product_id_type' => 'getProductIdType',
        'search_term' => 'getSearchTerm',
        'source' => 'getSource'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const OPERATION_BY_PRODUCT = 'FIND_ITEMS_BY_PRODUCT';
    const OPERATION_BY_KEYWORDS = 'FIND_ITEMS_BY_KEYWORDS';
    const OPERATION_ADVANCED = 'FIND_ITEMS_ADVANCED';
    const PRODUCT_ID_TYPE_EAN = 'EAN';
    const PRODUCT_ID_TYPE_UPC = 'UPC';
    const PRODUCT_ID_TYPE_ISBN = 'ISBN';
    const PRODUCT_ID_TYPE_REFERENCE_ID = 'REFERENCE_ID';
    const SOURCE_AUTO_GENERATED_AI = 'AUTO_GENERATED_AI';
    const SOURCE_AUTO_GENERATED_ITEM_SPECS = 'AUTO_GENERATED_ITEM_SPECS';
    const SOURCE_AUTO_GENERATED_PRODUCT_ID = 'AUTO_GENERATED_PRODUCT_ID';
    const SOURCE_AUTO_GENERATED_TITLE = 'AUTO_GENERATED_TITLE';
    const SOURCE_CSV = 'CSV';
    const SOURCE_MANUAL = 'MANUAL';
    const SOURCE_UNKNOWN = 'UNKNOWN';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_BY_PRODUCT,
            self::OPERATION_BY_KEYWORDS,
            self::OPERATION_ADVANCED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getProductIdTypeAllowableValues()
    {
        return [
            self::PRODUCT_ID_TYPE_EAN,
            self::PRODUCT_ID_TYPE_UPC,
            self::PRODUCT_ID_TYPE_ISBN,
            self::PRODUCT_ID_TYPE_REFERENCE_ID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_AUTO_GENERATED_AI,
            self::SOURCE_AUTO_GENERATED_ITEM_SPECS,
            self::SOURCE_AUTO_GENERATED_PRODUCT_ID,
            self::SOURCE_AUTO_GENERATED_TITLE,
            self::SOURCE_CSV,
            self::SOURCE_MANUAL,
            self::SOURCE_UNKNOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['repricing_item_id'] = isset($data['repricing_item_id']) ? $data['repricing_item_id'] : null;
        $this->container['inserted'] = isset($data['inserted']) ? $data['inserted'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['product_id_type'] = isset($data['product_id_type']) ? $data['product_id_type'] : null;
        $this->container['search_term'] = isset($data['search_term']) ? $data['search_term'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['operation'] === null) {
            $invalid_properties[] = "'operation' can't be null";
        }
        $allowed_values = ["FIND_ITEMS_BY_PRODUCT", "FIND_ITEMS_BY_KEYWORDS", "FIND_ITEMS_ADVANCED"];
        if (!in_array($this->container['operation'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'operation', must be one of 'FIND_ITEMS_BY_PRODUCT', 'FIND_ITEMS_BY_KEYWORDS', 'FIND_ITEMS_ADVANCED'.";
        }

        $allowed_values = ["EAN", "UPC", "ISBN", "REFERENCE_ID"];
        if (!in_array($this->container['product_id_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'product_id_type', must be one of 'EAN', 'UPC', 'ISBN', 'REFERENCE_ID'.";
        }

        if ($this->container['search_term'] === null) {
            $invalid_properties[] = "'search_term' can't be null";
        }
        $allowed_values = ["AUTO_GENERATED_AI", "AUTO_GENERATED_ITEM_SPECS", "AUTO_GENERATED_PRODUCT_ID", "AUTO_GENERATED_TITLE", "CSV", "MANUAL", "UNKNOWN"];
        if (!in_array($this->container['source'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'source', must be one of 'AUTO_GENERATED_AI', 'AUTO_GENERATED_ITEM_SPECS', 'AUTO_GENERATED_PRODUCT_ID', 'AUTO_GENERATED_TITLE', 'CSV', 'MANUAL', 'UNKNOWN'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['operation'] === null) {
            return false;
        }
        $allowed_values = ["FIND_ITEMS_BY_PRODUCT", "FIND_ITEMS_BY_KEYWORDS", "FIND_ITEMS_ADVANCED"];
        if (!in_array($this->container['operation'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["EAN", "UPC", "ISBN", "REFERENCE_ID"];
        if (!in_array($this->container['product_id_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['search_term'] === null) {
            return false;
        }
        $allowed_values = ["AUTO_GENERATED_AI", "AUTO_GENERATED_ITEM_SPECS", "AUTO_GENERATED_PRODUCT_ID", "AUTO_GENERATED_TITLE", "CSV", "MANUAL", "UNKNOWN"];
        if (!in_array($this->container['source'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets repricing_item_id
     * @return int
     */
    public function getRepricingItemId()
    {
        return $this->container['repricing_item_id'];
    }

    /**
     * Sets repricing_item_id
     * @param int $repricing_item_id
     * @return $this
     */
    public function setRepricingItemId($repricing_item_id)
    {
        $this->container['repricing_item_id'] = $repricing_item_id;

        return $this;
    }

    /**
     * Gets inserted
     * @return \DateTime
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     * @param \DateTime $inserted
     * @return $this
     */
    public function setInserted($inserted)
    {
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets updated
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     * @param \DateTime $updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets operation
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     * @param string $operation
     * @return $this
     */
    public function setOperation($operation)
    {
        $allowed_values = array('FIND_ITEMS_BY_PRODUCT', 'FIND_ITEMS_BY_KEYWORDS', 'FIND_ITEMS_ADVANCED');
        if ((!in_array($operation, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'operation', must be one of 'FIND_ITEMS_BY_PRODUCT', 'FIND_ITEMS_BY_KEYWORDS', 'FIND_ITEMS_ADVANCED'");
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets product_id_type
     * @return string
     */
    public function getProductIdType()
    {
        return $this->container['product_id_type'];
    }

    /**
     * Sets product_id_type
     * @param string $product_id_type
     * @return $this
     */
    public function setProductIdType($product_id_type)
    {
        $allowed_values = array('EAN', 'UPC', 'ISBN', 'REFERENCE_ID');
        if (!is_null($product_id_type) && (!in_array($product_id_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'product_id_type', must be one of 'EAN', 'UPC', 'ISBN', 'REFERENCE_ID'");
        }
        $this->container['product_id_type'] = $product_id_type;

        return $this;
    }

    /**
     * Gets search_term
     * @return string
     */
    public function getSearchTerm()
    {
        return $this->container['search_term'];
    }

    /**
     * Sets search_term
     * @param string $search_term
     * @return $this
     */
    public function setSearchTerm($search_term)
    {
        $this->container['search_term'] = $search_term;

        return $this;
    }

    /**
     * Gets source
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     * @param string $source
     * @return $this
     */
    public function setSource($source)
    {
        $allowed_values = array('AUTO_GENERATED_AI', 'AUTO_GENERATED_ITEM_SPECS', 'AUTO_GENERATED_PRODUCT_ID', 'AUTO_GENERATED_TITLE', 'CSV', 'MANUAL', 'UNKNOWN');
        if (!is_null($source) && (!in_array($source, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'source', must be one of 'AUTO_GENERATED_AI', 'AUTO_GENERATED_ITEM_SPECS', 'AUTO_GENERATED_PRODUCT_ID', 'AUTO_GENERATED_TITLE', 'CSV', 'MANUAL', 'UNKNOWN'");
        }
        $this->container['source'] = $source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\eSagu\EBay\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\eSagu\EBay\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


