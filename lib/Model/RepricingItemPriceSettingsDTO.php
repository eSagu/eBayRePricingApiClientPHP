<?php
/**
 * RepricingItemPriceSettingsDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  eSagu\EBay\RePricing\V1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eSagu ebay RePricing API
 *
 * eSagu API to reprice items on ebay.
 *
<<<<<<< HEAD
 * OpenAPI spec version: 1.2.14
=======
 * OpenAPI spec version: 1.0.0
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace eSagu\EBay\RePricing\V1\Model;

use \ArrayAccess;

/**
 * RepricingItemPriceSettingsDTO Class Doc Comment
 *
 * @category    Class
 * @description The repricing item&#39;s price settings. The price settings include the price range and the strategy used for optimization. The minPrice must be greater 0, the max price must be greater as the min price. The fixedPrice bust be between the min and max price.
 * @package     eSagu\EBay\RePricing\V1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RepricingItemPriceSettingsDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RepricingItemPriceSettingsDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
<<<<<<< HEAD
        'inserted' => '\DateTime',
        'updated' => '\DateTime',
        'min_price' => 'int',
        'max_price' => 'int',
        'fixed_price' => 'int',
        'mode' => 'string'
=======
        'fixed_price' => 'int',
        'inserted' => '\DateTime',
        'max_price' => 'int',
        'min_price' => 'int',
        'mode' => 'string',
        'updated' => '\DateTime'
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
<<<<<<< HEAD
        'inserted' => 'inserted',
        'updated' => 'updated',
        'min_price' => 'minPrice',
        'max_price' => 'maxPrice',
        'fixed_price' => 'fixedPrice',
        'mode' => 'mode'
=======
        'fixed_price' => 'fixedPrice',
        'inserted' => 'inserted',
        'max_price' => 'maxPrice',
        'min_price' => 'minPrice',
        'mode' => 'mode',
        'updated' => 'updated'
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
<<<<<<< HEAD
        'inserted' => 'setInserted',
        'updated' => 'setUpdated',
        'min_price' => 'setMinPrice',
        'max_price' => 'setMaxPrice',
        'fixed_price' => 'setFixedPrice',
        'mode' => 'setMode'
=======
        'fixed_price' => 'setFixedPrice',
        'inserted' => 'setInserted',
        'max_price' => 'setMaxPrice',
        'min_price' => 'setMinPrice',
        'mode' => 'setMode',
        'updated' => 'setUpdated'
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
<<<<<<< HEAD
        'inserted' => 'getInserted',
        'updated' => 'getUpdated',
        'min_price' => 'getMinPrice',
        'max_price' => 'getMaxPrice',
        'fixed_price' => 'getFixedPrice',
        'mode' => 'getMode'
=======
        'fixed_price' => 'getFixedPrice',
        'inserted' => 'getInserted',
        'max_price' => 'getMaxPrice',
        'min_price' => 'getMinPrice',
        'mode' => 'getMode',
        'updated' => 'getUpdated'
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const MODE_UNDEFINED = 'UNDEFINED';
    const MODE_FIXED_PRICE = 'FIXED_PRICE';
    const MODE_OPTIMIZATION = 'OPTIMIZATION';
    const MODE_DISABLED = 'DISABLED';
    const MODE_CUSTOM_CODE = 'CUSTOM_CODE';
    const MODE_OPTIMIZATION_BEST_VISIBILITY = 'OPTIMIZATION_BEST_VISIBILITY';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_UNDEFINED,
            self::MODE_FIXED_PRICE,
            self::MODE_OPTIMIZATION,
            self::MODE_DISABLED,
            self::MODE_CUSTOM_CODE,
            self::MODE_OPTIMIZATION_BEST_VISIBILITY,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
<<<<<<< HEAD
        $this->container['inserted'] = isset($data['inserted']) ? $data['inserted'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['min_price'] = isset($data['min_price']) ? $data['min_price'] : null;
        $this->container['max_price'] = isset($data['max_price']) ? $data['max_price'] : null;
        $this->container['fixed_price'] = isset($data['fixed_price']) ? $data['fixed_price'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
=======
        $this->container['fixed_price'] = isset($data['fixed_price']) ? $data['fixed_price'] : null;
        $this->container['inserted'] = isset($data['inserted']) ? $data['inserted'] : null;
        $this->container['max_price'] = isset($data['max_price']) ? $data['max_price'] : null;
        $this->container['min_price'] = isset($data['min_price']) ? $data['min_price'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["UNDEFINED", "FIXED_PRICE", "OPTIMIZATION", "DISABLED", "CUSTOM_CODE", "OPTIMIZATION_BEST_VISIBILITY"];
        if (!in_array($this->container['mode'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'mode', must be one of 'UNDEFINED', 'FIXED_PRICE', 'OPTIMIZATION', 'DISABLED', 'CUSTOM_CODE', 'OPTIMIZATION_BEST_VISIBILITY'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["UNDEFINED", "FIXED_PRICE", "OPTIMIZATION", "DISABLED", "CUSTOM_CODE", "OPTIMIZATION_BEST_VISIBILITY"];
        if (!in_array($this->container['mode'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
<<<<<<< HEAD
=======
     * Gets fixed_price
     * @return int
     */
    public function getFixedPrice()
    {
        return $this->container['fixed_price'];
    }

    /**
     * Sets fixed_price
     * @param int $fixed_price
     * @return $this
     */
    public function setFixedPrice($fixed_price)
    {
        $this->container['fixed_price'] = $fixed_price;

        return $this;
    }

    /**
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
     * Gets inserted
     * @return \DateTime
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     * @param \DateTime $inserted
     * @return $this
     */
    public function setInserted($inserted)
    {
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
<<<<<<< HEAD
     * Gets updated
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     * @param \DateTime $updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets min_price
     * @return int
     */
    public function getMinPrice()
    {
        return $this->container['min_price'];
    }

    /**
     * Sets min_price
     * @param int $min_price
     * @return $this
     */
    public function setMinPrice($min_price)
    {
        $this->container['min_price'] = $min_price;

        return $this;
    }

    /**
=======
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
     * Gets max_price
     * @return int
     */
    public function getMaxPrice()
    {
        return $this->container['max_price'];
    }

    /**
     * Sets max_price
     * @param int $max_price
     * @return $this
     */
    public function setMaxPrice($max_price)
    {
        $this->container['max_price'] = $max_price;

        return $this;
    }

    /**
<<<<<<< HEAD
     * Gets fixed_price
     * @return int
     */
    public function getFixedPrice()
    {
        return $this->container['fixed_price'];
    }

    /**
     * Sets fixed_price
     * @param int $fixed_price
     * @return $this
     */
    public function setFixedPrice($fixed_price)
    {
        $this->container['fixed_price'] = $fixed_price;
=======
     * Gets min_price
     * @return int
     */
    public function getMinPrice()
    {
        return $this->container['min_price'];
    }

    /**
     * Sets min_price
     * @param int $min_price
     * @return $this
     */
    public function setMinPrice($min_price)
    {
        $this->container['min_price'] = $min_price;
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b

        return $this;
    }

    /**
     * Gets mode
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     * @param string $mode
     * @return $this
     */
    public function setMode($mode)
    {
        $allowed_values = array('UNDEFINED', 'FIXED_PRICE', 'OPTIMIZATION', 'DISABLED', 'CUSTOM_CODE', 'OPTIMIZATION_BEST_VISIBILITY');
        if (!is_null($mode) && (!in_array($mode, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'mode', must be one of 'UNDEFINED', 'FIXED_PRICE', 'OPTIMIZATION', 'DISABLED', 'CUSTOM_CODE', 'OPTIMIZATION_BEST_VISIBILITY'");
        }
        $this->container['mode'] = $mode;

        return $this;
    }
<<<<<<< HEAD
=======

    /**
     * Gets updated
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     * @param \DateTime $updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }
>>>>>>> a0d1cbe91759f3ab528e23040bc9b2ac6045ad7b
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\eSagu\EBay\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\eSagu\EBay\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


